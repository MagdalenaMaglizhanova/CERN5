import streamlit as st
import plotly.graph_objects as go
import numpy as np

st.set_page_config(page_title="–°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Å–±–ª—ä—Å—ä–∫ - CERN", layout="wide")

st.title("–°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Å–±–ª—ä—Å—ä–∫ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏ - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–µ–Ω –º–æ–¥—É–ª CERN")

st.header("üëÄ –ö–∞–∫–≤–æ –µ —Å–±–ª—ä—Å—ä–∫ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏?")
st.markdown("""
–í –¶–ï–†–ù —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏—Ç–µ —Å–±–ª—ä—Å–∫–≤–∞—Ç —á–∞—Å—Ç–∏—Ü–∏ —Å –º–Ω–æ–≥–æ –≤–∏—Å–æ–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏,  
–∑–∞ –¥–∞ —Ä–∞–∑–±–µ—Ä–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏—è—Ç–∞ –∏ –≤—Å–µ–ª–µ–Ω–∞—Ç–∞.  
–í–∏–∂—Ç–µ –∫—Ä–∞—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏—è, –∫–æ—è—Ç–æ –ø–æ–∫–∞–∑–≤–∞ –∫–∞–∫ –ø—Ä–æ—Ç–æ–Ω–∏—Ç–µ —Å–µ —Å–±–ª—ä—Å–∫–≤–∞—Ç –≤ –≥–æ–ª–µ–º–∏—è –∞–¥—Ä–æ–Ω–µ–Ω –∫–æ–ª–∞–π–¥–µ—Ä (LHC).
""")
st.video("https://www.youtube.com/watch?v=Yq0zeWX49SM")

st.markdown("---")

st.header("üß™ –ü—É—Å–Ω–∏ —Å–±–ª—ä—Å—ä–∫ —Å —Ç–≤–æ–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")

col1, col2 = st.columns(2)
with col1:
    m1 = st.number_input("–ú–∞—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 1 (kg)", min_value=0.1, value=5.0, step=0.1)
    v1 = st.number_input("–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 1 (m/s)", value=5.0, step=0.1)
with col2:
    m2 = st.number_input("–ú–∞—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 2 (kg)", min_value=0.1, value=5.0, step=0.1)
    v2 = st.number_input("–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 2 (m/s)", value=-3.0, step=0.1)

collision_type = st.selectbox("–ò–∑–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞ —Å–±–ª—ä—Å—ä–∫–∞:", ["–ï–ª–∞—Å—Ç–∏—á–µ–Ω", "–ù–µ–µ–ª–∞—Å—Ç–∏—á–µ–Ω"])

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ —Å–ø–æ—Ä–µ–¥ —Ç–∏–ø–∞ —Å–±–ª—ä—Å—ä–∫
if collision_type == "–ï–ª–∞—Å—Ç–∏—á–µ–Ω":
    v1_final = ((m1 - m2) / (m1 + m2)) * v1 + ((2 * m2) / (m1 + m2)) * v2
    v2_final = ((2 * m1) / (m1 + m2)) * v1 + ((m2 - m1) / (m1 + m2)) * v2
else:
    # –ù–µ–µ–ª–∞—Å—Ç–∏—á–µ–Ω - —á–∞—Å—Ç–∏—Ü–∏—Ç–µ —Å–µ —Å–ª–µ–ø–≤–∞—Ç
    v_final = (m1 * v1 + m2 * v2) / (m1 + m2)
    v1_final = v_final
    v2_final = v_final

# –ü–æ–¥–≥–æ—Ç–≤—è–Ω–µ –Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
t = np.linspace(0, 2, 30)
if collision_type == "–ï–ª–∞—Å—Ç–∏—á–µ–Ω":
    x1 = v1 * t
    x2 = 10 + v2 * t
else:
    # –ó–∞ –Ω–µ–µ–ª–∞—Å—Ç–∏—á–µ–Ω —Å–±–ª—ä—Å—ä–∫ –ø–æ–∫–∞–∑–≤–∞–º–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ—Ç–µ —á–∞—Å—Ç–∏—Ü–∏ –¥–æ —Å–±–ª—ä—Å—ä–∫, –ø–æ—Å–ª–µ —Å –æ–±—â–∞ —Å–∫–æ—Ä–æ—Å—Ç
    collision_time = 10 / (v1 - v2) if v1 != v2 else 1  # –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ —Å–±–ª—ä—Å—ä–∫
    x1 = np.piecewise(t, [t < collision_time, t >= collision_time],
                      [lambda t: v1 * t, lambda t: v_final * t])
    x2 = np.piecewise(t, [t < collision_time, t >= collision_time],
                      [lambda t: 10 + v2 * t, lambda t: 10 + v_final * t])

frames = []
for i in range(len(t)):
    frames.append(go.Frame(data=[
        go.Scatter3d(x=[x1[i]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=10, color='blue'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 1"], textposition="top center"),
        go.Scatter3d(x=[x2[i]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=10, color='red'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 2"], textposition="top center")
    ]))

layout = go.Layout(
    scene=dict(
        xaxis=dict(range=[-10, 30], title='–ü–æ–∑–∏—Ü–∏—è X'),
        yaxis=dict(range=[-5, 5], title='Y'),
        zaxis=dict(range=[-5, 5], title='Z'),
    ),
    title=f"3D –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ {collision_type.lower()} —Å–±–ª—ä—Å—ä–∫",
    margin=dict(l=0, r=0, b=0, t=40),
    height=500,
    updatemenus=[dict(type="buttons", showactive=False,
                      buttons=[dict(label="‚ñ∂ –ü—É—Å–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞",
                                    method="animate",
                                    args=[None, {"frame": {"duration": 100, "redraw": True},
                                                 "fromcurrent": True}])])]
)

fig = go.Figure(
    data=[
        go.Scatter3d(x=[x1[0]], y=[0], z=[0], mode='markers', marker=dict(size=10, color='blue')),
        go.Scatter3d(x=[x2[0]], y=[0], z=[0], mode='markers', marker=dict(size=10, color='red'))
    ],
    layout=layout,
    frames=frames
)

st.plotly_chart(fig, use_container_width=True)

st.markdown("## üìâ –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Å–±–ª—ä—Å—ä–∫–∞")

impulse_before = m1 * v1 + m2 * v2
impulse_after = m1 * v1_final + m2 * v2_final

energy_before = 0.5 * m1 * v1 ** 2 + 0.5 * m2 * v2 ** 2
energy_after = 0.5 * m1 * v1_final ** 2 + 0.5 * m2 * v2_final ** 2

st.write(f"**–ò–º–ø—É–ª—Å –ø—Ä–µ–¥–∏ —Å–±–ª—ä—Å—ä–∫–∞:** {impulse_before:.2f} kg¬∑m/s")
st.write(f"**–ò–º–ø—É–ª—Å —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫–∞:** {impulse_after:.2f} kg¬∑m/s")
st.write(f"**–ö–∏–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è –ø—Ä–µ–¥–∏ —Å–±–ª—ä—Å—ä–∫–∞:** {energy_before:.2f} J")
st.write(f"**–ö–∏–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫–∞:** {energy_after:.2f} J")

energy_loss = energy_before - energy_after
if collision_type == "–ù–µ–µ–ª–∞—Å—Ç–∏—á–µ–Ω":
    st.write(f"**–ó–∞–≥—É–±–∞ –Ω–∞ –∫–∏–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è:** {energy_loss:.2f} J (–ø—Ä–µ–≤—Ä—ä—â–∞ —Å–µ –≤ —Ç–æ–ø–ª–∏–Ω–∞/–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è)")

st.markdown("---")

st.header("ü§î –í—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ä–∞–∑–º–∏—Å—ä–ª")

st.markdown("""
- –ó–∞–ø–∞–∑–≤–∞ –ª–∏ —Å–µ –∏–º–ø—É–ª—Å—ä—Ç?  
- –ó–∞–ø–∞–∑–≤–∞ –ª–∏ —Å–µ –∫–∏–Ω–µ—Ç–∏—á–Ω–∞—Ç–∞ –µ–Ω–µ—Ä–≥–∏—è?  
- –ö–∞–∫ —Å–µ –ø—Ä–æ–º–µ–Ω—è—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ —Å–±–ª—ä—Å—ä—Ü–∏?  
- –ö–∞–∫–≤–æ –æ–∑–Ω–∞—á–∞–≤–∞, –∞–∫–æ –∫–∏–Ω–µ—Ç–∏—á–Ω–∞—Ç–∞ –µ–Ω–µ—Ä–≥–∏—è –Ω–∞–º–∞–ª—è–≤–∞?  
""")

st.header("‚úçÔ∏è –í—ä–≤–µ–¥–∏ —Å–≤–æ—è —Ö–∏–ø–æ—Ç–µ–∑–∞ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç —Å–±–ª—ä—Å—ä–∫–∞:")

hypothesis = st.text_area("–ö–∞–∫–≤–æ –æ—á–∞–∫–≤–∞—à –¥–∞ —Å–µ —Å–ª—É—á–∏ —Å—ä—Å —Å–∫–æ—Ä–æ—Å—Ç–∏—Ç–µ –∏ –µ–Ω–µ—Ä–≥–∏—è—Ç–∞?")

if st.button("–ò–∑–ø—Ä–∞—Ç–∏ —Ö–∏–ø–æ—Ç–µ–∑–∞—Ç–∞"):
    if hypothesis.strip() == "":
        st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞ —Ö–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ —Å–∏.")
    else:
        if "hypotheses" not in st.session_state:
            st.session_state.hypotheses = []
        st.session_state.hypotheses.append(hypothesis)
        st.success("–•–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ —Ç–∏ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞! –ú–Ω–æ–≥–æ –¥–æ–±—Ä–µ, —á–µ –º–∏—Å–ª–∏—à –∞–∫—Ç–∏–≤–Ω–æ!")

        st.markdown("### –ü—Ä–∏–º–µ—Ä–Ω–∏ —Ö–∏–ø–æ—Ç–µ–∑–∏ –Ω–∞ –¥—Ä—É–≥–∏ —É—á–µ–Ω–∏—Ü–∏:")
        for i, hyp in enumerate(st.session_state.hypotheses[-5:], 1):
            st.write(f"{i}. {hyp}")
